#!/usr/bin/env ruby
# NOTE: Above shebang selects the first Ruby found in $PATH and is standard practice to work with 
# multiple installed versions and version switchers like chruby; see https://stackoverflow.com/a/2792076

# Suppress depreciation warnings from the awesome_print gem.
# @todo Fix the gem, then remove this.
$VERBOSE = nil

# Gem includes. See Gemfile.
require 'docopt'
require 'sqlite3'
require 'csv'
require 'ox'
require 'awesome_print'
require 'date'
require 'i18n'

# Local, non-gem includes.
require_relative '../lib/database'
require_relative '../lib/topic'

# Add translation functions like _(â€¦) to the global namespace.
#   See: https://www.rubydoc.info/github/svenfuchs/i18n/master/I18n/Gettext/Helpers
include I18n::Gettext::Helpers


#############################################################################
# UTILITIES

version = '0.1'

# Command line documentation that's also the spec for a command line parser.
# 
# Format specs: http://docopt.org/
# Library docs: https://github.com/docopt/docopt.rb
doc = <<DOCOPT
Converts the content from the USDA FoodKeeper Android app to SQLite3 format.

The script reads the FoodKeeper SQLite3 database from FK_DB, converts it and writes the result to
the CSV file CSV_OUT using the usual topic CSV format of the foodrescue-content software. The
script also expects a CSV file CSV_IN with extra data, containing columns "FoodKeeper Product ID",
"Food Rescue Categories" (a multi-value field) and "Food Rescue Topic Intro".

Examples: For the foodrescue-content repo, the command to run is:

  scripts/foodkeeper-to-topics \
    content-topics/topics-foodkeeper-source.sqlite3 \
    content-topics/topics-foodkeeper-source.csv \
    content-topics/topics-foodkeeper-en.csv

Usage:
  #{__FILE__} DB CSV_IN CSV_OUT
  #{__FILE__} -t POFILE DB CSV_IN CSV_OUT
  #{__FILE__} -h | --help
  #{__FILE__} -v | --version

Options:
  -t POFILE, --translations POFILE  Path to a .po file providing string translations. Must be named
                                    with a two-letter language identifier as a filename, e.g. de.po.
  -h, --help                        Show this screen.
  -v, --version                     Show version.

DOCOPT


# ## Table structure of the FoodKeeper App database
#
# * **FOOD_CATEGORY, FOOD_CATEGORY_ES, FOOD_CATEGORY_PT.** The 25 main and sub categories of food found on the app's start 
#   screen. Not all categories have sub-categories, but if one has them, then products can not be in the main category.
# * **PRODUCTS, PRODUCTS_ES, PRODUCTS_PT.** The main table with all storage durations and instructions for 396 products. 
#   Products are rather types of products. There is one table per language, where all tips and other texts are translated and 
#   all numbers appear redundantly. Translation is complete.
# * **COOKING_METHODS, COOKING_METHODS_ES, COOKING_METHODS_PT.** Cooking instructions for 89 products. Could be part of 
#   PRODUCTS since it's a 1:1 relation. One table per language, but only the "Cooking_Method" column is really a free-text 
#   field that needs translation.
# * **COOKING_TIPS, COOKING_TIPS_ES, COOKING_TIPS_PT.** 93 cooking tips including a free-text column, a safe minimum 
#   temperature (in Fahrenheit), and a rest time. Some tips are identical because this table is not normalized.
# * **FAVORITE_PRODUCTS.** The user's heart-marked products in the app. Not relevant.
# * **SEARCH_HISTORY.** The user's search history in the app. Not relevant.
# * **RECALLS.** Product recalls. Not relevant.
# 
#
# ## Column structure of the PRODUCTS table in the FoodKeeper App database
# 
# * **Name.** Defines the general type of product.
# * **Name_subtitle.** An optional, more detailed definition of the type of product, used esp. where "Name" is identical for 
#   several products.
# * **\*_Min, \*_Max, \*_Metric.** The storage duration range for a specific storage type. The `_Metric` column contains the 
#   unit ("Days", "Weeks" etc.).
# * **Pantry_(Min|Max|Metric).** The "general" pantry storage, independent of whether the package is already opened or not. 
#   Only 6 products have this. A value here is mutually exclusive with a value in any of the other two pantry storage types.
# * **DOP_Pantry_(Min|Max|Metric).** Storage in the pantry from the date of purchase. Without opening the package, as otherwise 
#   also having the "pantry after opening" storage type would make no sense. Products can have values heere and in the "pantry 
#   after opening" columns at the same time.
# * **Pantry_After_Opening_(Min|Max|Metric).** Values can appear here in addition to `DOP_Pantry_(Min|Max|Metric)`.
# 
# For the refrigeration and freezing related columns, the same relationship between columns applies as for the pantry storage 
# related columns.
# 
# * **Pantry_tips, Refrigerate_tips, Freeze_Tips.** These are the only relevant columns with tips. The columns `DOP_*_tips` are 
#   all empty, and other tips columns do not even exist. Logically, some tips here refer storage types stored in other columns 
#   than `Pantry_*`, `Refrigerate_*` or `Freeze_*`, for example the tip "After opening time applies to prepared product.". So 
#   these tips should be rendered once for the whole list of pantry, refrigerator or freezer storage instructions, as they seem 
#   to apply to the whole list.
# * **DOP_Pantry_tips, DOP_Refrigerate_tips, DOP_Freeze_Tips.** These columns are completely empty, see:
#   `SELECT ID, DOP_Pantry_tips FROM PRODUCTS WHERE DOP_Pantry_tips != '';`
# 
# All columns are of data type "TEXT".
# 
#
# ## Other observations about the FoodKeeper App
# 
# * The app is 94 MiB in size and basically all of that is consumed by high-dpi stock images in PNG format (!), used in the app 
#   in the background.
# * The database is only 280 kiB, and even that contains redundancy due to the way how translations, cooking methods and 
#   cooking tips are saved. And because each column has a SQLite3 ROWID column. 120 kiB would be achievable easily.
# 
#
# ## Remaining work for future extensions
# 
# @todo (later) Refactor code in this script into a class FoodKeeperDatabase, stored in the same file in this script (because 
#   it is not re-usable).
# @todo (later) Normalize the FoodKeeper database column names: `_tips` should be `_Tips` everywhere.
# @todo (later) Make this script downloading the FoodKeeper .apk file from Google Play, using a command like Raccoon.
# @todo (later) Also include extracting the FoodKeeper database from the .apk file. Probably, a simple unzip command (of only 
#   the SQLite database) will be sufficient, with no need for apktool.
# @todo (later) As an alternative to the above, include a SQL command dump of the FoodKeeper database into the Git repository, 
#   and enable this script to read it as an alternative to being provided a binary SQLite database file. The SQL dump format is 
#   better manageable for Git.


# Create and populate a database table with a mapping between FoodKeeper products and Food Rescue Database categories.
# 
# @param catmap_path [String]  Path to the CSV file with the category mapping. Expected columns: "FoodKeeper Product ID" and 
#   "Food Rescue Categories".
# @param db [SQLite3::Database]  The database connection to the FoodKeeper database. The category mapping refers to product 
#   records in this database by ID.
def import_food_rescue_categories(catmap_path, db)

  # Let the OS sync write operations to the database file when it wants rather than after each command.
  # 
  # Reason: "Commits can be orders of magnitude faster with synchronous OFF" as per 
  # https://sqlite.org/pragma.html#pragma_synchronous and we don't care here about database corruption on power outage. 
  # Because it can be simply generated anew by running the import scripts again.
  db.execute 'PRAGMA synchronous = OFF'

  # Create the database table for the category mapping.
  db.execute '
    CREATE TABLE IF NOT EXISTS FOOD_RESCUE_CATEGORIES (
      Product_ID    INTEGER,
      Category_Name TEXT,
      ----
      PRIMARY KEY   (Product_ID, Category_Name)
    )'

  # Import the category mapping from the CSV file.
  CSV.foreach(catmap_path, { headers: true }) do |row|
    foodkeeper_id = row['FoodKeeper Product ID']
    cat_names = row['Food Rescue Categories']&.split("\n")

    next if cat_names.nil? or cat_names.empty? # Do not import incomplete data.
    
    cat_names.each do |cat_name|
      db.execute \
        'INSERT INTO FOOD_RESCUE_CATEGORIES (Product_ID, Category_Name) VALUES (?, ?)', 
        [foodkeeper_id, cat_name]
    end
  end

  # Restore synchronous operation, which was disabled at the start of the method.
  db.execute 'PRAGMA synchronous = ON'
end


# Import names for FoodKeeper products that can be used in ordinary sentences.
#
# Because the hierarchical names consisting of product category, subcategory, name and name subtitle cannot reasonably be
# used when formulating full sentences.
# 
# @param csv_path [String]  Path to the CSV file with the category mapping. Expected columns: "FoodKeeper Product ID" and 
#   "Food Rescue Topic Intro".
# @param db [SQLite3::Database]  The database connection to the FoodKeeper database. The category mapping refers to product 
#   records in this database by ID.
def import_food_rescue_food_names(csv_path, db)

  # Let the OS sync write operations to the database file when it wants rather than after each command.
  # 
  # Reason: "Commits can be orders of magnitude faster with synchronous OFF" as per 
  # https://sqlite.org/pragma.html#pragma_synchronous and we don't care here about database corruption on power outage. 
  # Because it can be simply generated anew by running the import scripts again.
  db.execute 'PRAGMA synchronous = OFF'

  # Create the database table for the category mapping.
  db.execute 'ALTER TABLE PRODUCTS ADD COLUMN Food_Rescue_Food_Name TEXT'

  # Import the topic intro texts from the CSV file.
  CSV.foreach(csv_path, { headers: true }) do |row|
    foodkeeper_id = Integer(row['FoodKeeper Product ID'])

    name = row['Food Rescue Food Name']
    db.execute 'UPDATE PRODUCTS SET Food_Rescue_Food_Name = ? WHERE ID = ?', [name, foodkeeper_id] unless name.nil? or name.empty?
  end

  # Restore synchronous operation, which was disabled at the start of the method.
  db.execute 'PRAGMA synchronous = ON'
end


# Determine the Open Food Facts categories for this FoodKeeper product.
# 
# The mapping conveniently relies on a table `FOOD_RESCUE_CATEGORIES` that has to be added to the FoodKeeper database and populated before
# calling. See `#import_food_rescue_categories`.
# 
# @param product_id [Integer]  The FoodKeeper database's PRODUCTS.ID value of the product for which to determine the food rescue 
#   categories.
# @param db [SQLite3::Database]  The database connection to the FoodKeeper database.
# @return [Array<String>]  The OFF categories, using their full English names. Only when no English name is available, a name in
#   a different language would be used, with a two-letter language prefix such as "fr:French Category Name Here".
def categories(product_id, db)
  db
    .execute('SELECT Category_Name FROM FOOD_RESCUE_CATEGORIES WHERE Product_ID = ?', [ product_id ])
    .collect { |row| row['Category_Name'] }
end


# Determine what storage types are defined for a given FoodKeeper product.
# 
# @param product_id [Integer]  The FoodKeeper database's PRODUCTS.ID value of the given product.
# @param db [SQLite3::Database]  The database connection to the FoodKeeper database.
# @return [Array<Symbol>]  The storage types defined for this product. Contained values can be or or more of `:pantry`, 
#   `:refrigerator`, `:freezer`. 
def storage_types(product_id, db)

  # Database column name prefixes and the three storage types they belong to.
  storage_type_prefixes = {
    pantry:       [ 'Pantry',      'DOP_Pantry',      'Pantry_After_Opening'                                   ],
    refrigerator: [ 'Refrigerate', 'DOP_Refrigerate', 'Refrigerate_After_Opening', 'Refrigerate_After_Thawing' ],
    freezer:      [ 'Freeze',      'DOP_Freeze'                                                                ]
  }

  product = db.get_first_row('SELECT * FROM PRODUCTS WHERE ID = ?', [ product_id ])

  storage_types = []
  storage_type_prefixes.each do |storage_type, field_prefixes|
    field_prefixes.each do |prefix|
      # If a storage duration is defined in the #{prefix} database column, the corresponding 
      # storage type is defined for this product.
      unless shelf_life(product_id, db, prefix).empty?
        storage_types << storage_type
        next
      end
    end
  end

  return storage_types
end


# Render the specified product's shelf life into a string like "6-9 Months".
# 
# @param product_id [Integer]  The FoodKeeper database's PRODUCTS.ID value of the product about which the topic will be about.
# @param db [SQLite3::Database]  The database connection to the FoodKeeper database.
# @param field_prefix [String]  The prefix of the FoodKeeper database columns (in table PRODUCTS) to use when rendering the 
#   shelf life string. For example, `Pantry`.
# @return [String]  The shelf life string. It may contain XML, so must be added as raw content to an XML file. It may be the 
#   empty string if no information is present.
# 
# @todo Rename to better differentiate from #storage_durations.
def shelf_life(product_id, db, field_prefix)
  product = db.get_first_row('SELECT * FROM PRODUCTS WHERE ID = ?', [ product_id ])

  fields = product.select { |k,v| k.match(/^#{field_prefix}_(Min|Max|Metric)$/) }

  min_duration = product["#{field_prefix}_Min"]
  max_duration = product["#{field_prefix}_Max"]

  duration_metric = product["#{field_prefix}_Metric"]
  duration_metric = gettext(duration_metric) unless duration_metric.empty?

  text_after = case field_prefix
    when 'Pantry'
      gettext('in the pantry, whether sealed or not')
    when 'DOP_Pantry'
      gettext('in the pantry if still sealed')
    when 'Pantry_After_Opening'
      gettext('in the pantry after opening the package')
    when 'Refrigerate'
      gettext('in the fridge, whether sealed or not')
    when 'DOP_Refrigerate'
      gettext('in the fridge if stored there immediately after purchase, whether sealed or not')
    when 'Refrigerate_After_Opening'
      gettext('in the fridge if stored there after opening the package')
    when 'Refrigerate_After_Thawing'
      gettext('in the fridge if stored there after thawing a frozen item, whether sealed or not')
    when 'Freeze'
      gettext('in the freezer, whether sealed or not')
    when 'DOP_Freeze'
      gettext('in the freezer if stored there immediately after purchase, whether sealed or not')
  end

  if min_duration.empty?
    ""
  elsif min_duration == max_duration
    # @todo: Adapt #{duration_metric} to the singular if the duration is "1", such as "1 Week".
    "_#{min_duration} #{duration_metric}_ #{text_after}"
  else
    # An en dash, like here, is the correct typography for a range. See:
    # https://en.wikipedia.org/wiki/Dash#Ranges_of_values
    "_#{min_duration}â€“#{max_duration} #{duration_metric}_ #{text_after}"
  end
end


# Generate the main text for a topic about estimated storage durations.
#
# The topic intro text is "For â€¦, the typical storage life is: â€¦", followed by optional storage tips. The first ellipsis is
# filled with the full name of the FoodKeeper product, or if `PRODUCTS.Topic_Intro` provides a text to specify the food
# items precisely, with that text. This sentence is meant to help the user spot categorization errors.
#
# @param product_id [Integer]  The FoodKeeper database's PRODUCTS.ID value of the product about which the topic will be about.
# @param db [SQLite3::Database]  The database connection to the FoodKeeper database.
# @param storage_type [Symbol]  The storage type to generate instructions for. Any of `:pantry`, `:refrigerator`, `:freezer`.
# @return [String]  The topic text, in AsciiDoctor format.
# @see #import_food_rescue_categories Where the data is imported that this method needs.
def topic_text(product_id, db, storage_type: nil)
  product = db.get_first_row('SELECT * FROM PRODUCTS WHERE ID = ?', [ product_id ])
  category = db.get_first_row 'SELECT * FROM FOOD_CATEGORY WHERE ID = ?', [ product['Category_ID'] ]

  # Database column prefixes by storage type.
  column_prefixes = {
    pantry:       [ 'Pantry',      'DOP_Pantry',      'Pantry_After_Opening'                                   ],
    refrigerator: [ 'Refrigerate', 'DOP_Refrigerate', 'Refrigerate_After_Opening', 'Refrigerate_After_Thawing' ],
    freezer:      [ 'Freeze',      'DOP_Freeze'                                                                ]
  }

  # Shelf life durations as one sentence.
  shelf_life_text = ''
  column_prefixes[storage_type].each do |prefix|
    shelf_life = shelf_life(product_id, db, prefix)
    shelf_life_text += gettext(', and ') unless (shelf_life_text.empty? or shelf_life.empty?)
    shelf_life_text += shelf_life unless shelf_life.empty?
  end

  # Name to use for the product in the topic text.
  if product['Food_Rescue_Food_Name'].nil? or product['Food_Rescue_Food_Name'].empty?
    name = [category['Category_Name'], category['Subcategory_Name'], product['Name']].join(': ')
    name = "#{name} (#{product['Name_subtitle']})" unless product['Name_subtitle'].empty?
  else
    name = gettext(product['Food_Rescue_Food_Name'])
  end

  # Storage tips.
  #   Note that tips fields are either named `*_Tips` or `*_tips`. It should be `*_Tips` everywhere. SQLite3 column names
  #   are case-independent, so this sloppyness is tolerated in the database. But not for the hash keys here.
  tips_field = { pantry: 'Pantry_tips', refrigerator: 'Refrigerate_tips', freezer: 'Freeze_Tips' }[storage_type]
  tips = if product[tips_field].empty?
    then ''
    else "\n\n" + gettext("(Hints: %{hints})", hints: gettext(product[tips_field]))
  end

  storage_text = gettext(
    'For %{name}, the typical storage life is %{shelf_life_text}.',
    name: name,
    shelf_life_text: shelf_life_text
  )

  return storage_text + tips
end


# Render the pantry storage topic for one FoodKeeper product, in CSV+AsciiDoctor format.
# 
# @param product_id [Integer]  The FoodKeeper database's PRODUCTS.ID value of the product about which the topic will be about.
# @param topic_id [String]  Unique string identifying this topic. There can be multiple topics per product, so we cannot use
#   `product_id` for this purpose.
# @param db [SQLite3::Database]  The database connection to the FoodKeeper database.
# @param storage_type [Symbol]  The storage type of the storage topic to generate. One of: `:pantry`, `:refrigerator`, `:freezer`.
# @return [Array]  The created topic, using the columns as expected by the CSV file structure. These columns are:
#   "ID", "Title", "Abstract", "Text", "Topic type", "Categories", "Author", "Date added", "Version date", "Note".
def storage_topic(product_id, topic_id, db, storage_type)
  topic = { }
  topic[:id] = topic_id
  topic[:title] = gettext('Storage duration')
  topic[:abstract] = '' # No abstract by default because FoodKeeper topics are very short already.
  topic[:text] = topic_text(product_id, db, storage_type: storage_type)
  topic[:type] = "#{storage_type}_storage"
  topic[:categories] = categories(product_id, db).join("\n")

  # Author information about the FoodKeeper app.
  #
  # Since the original FoodKeeper content appears both on a website and mobile apps and it was not clear who its original
  # author is, only the app author is credited, since the content was taken from the app's database.
  #
  # Author information about the FoodKeeper app:
  # * https://play.google.com/store/apps/details?id=gov.usda.fsis.foodkeeper2
  # * https://www.fsis.usda.gov/wps/portal/informational/contactus
  #
  # Author information about the (seemingly identical) FoodKeeper web content:
  # * https://www.foodsafety.gov/keep-food-safe/foodkeeper-app
  # * https://www.foodsafety.gov/about
  topic[:author] = 'United States Department of Agriculture, Food Safety and Inspection Service, https://www.fsis.usda.gov/'

  topic[:date_added] = Date.today.iso8601

  # As of 2020-05-02, the topic's version date "2017-11-14" is derived from the "Updated" date of
  # the FoodKeeper app on Google Play. The website version notes "Date Last Reviewed: April 26, 2019",
  # so perhaps it contains more recent updates. See: https://www.foodsafety.gov/keep-food-safe/foodkeeper-app
  topic[:version_date] = '2017-11-14'

  topic[:note] = ''

  return topic.values
end


# Convert a single FoodKeeper product to CSV+AsciiDoctor format.
# 
# @param product_id [Integer]  The FoodKeeper database's `PRODUCTS.ID` value of the product about which the topic will be about.
# @param fk_db [SQLite3::Database]  The database connection to the FoodKeeper database.
# @return [Array[Array]]  An two-dimensional array, containing multiple food rescue topics record,
#   each record using the columns as expected by the CSV file structure. These columns are:
#   "ID", "Title", "Abstract", "Text", "Topic type", "Categories", "Author", "Date added", "Version date", "Note".
def product_to_csv(product_id, fk_db)
  product = fk_db.get_first_row('SELECT * FROM PRODUCTS WHERE ID = ?', [ product_id ])
  storage_types = storage_types(product_id, fk_db)

  topics = []
  storage_types.each do |storage_type|
    topics << storage_topic(product_id, "foodkeeper-#{product_id}-#{topics.count + 1}", fk_db, storage_type)
  end

  # @todo (later) Add a topic for the "Preparation Instructions" section.
  #   (Using the content from the COOKING_METHODS and COOKING_TIPS tables.)

  return topics
end


#############################################################################
# MAIN PROGRAM

# Argument parsing.
begin
  args = Docopt::docopt(doc, {version: version, help: true})
rescue Docopt::Exit => e
  $stderr.puts e.message
  exit -1
end


# Convert FoodKeeper products to food rescue content in a SQLite3 database.
begin
  # Set up string translations.
  I18n::Backend::Simple.include(I18n::Backend::Gettext)
  I18n.load_path << args['--translations'] if args.key?('--translations')
  # Translation files are named {lang}.po as expected by the Gettext backend of the I18n gem. So we
  # can determine the larget language by looking at the given filename.
  I18n.locale = File.basename(args['--translations'], ".*").to_sym if args.key?('--translations')

  # Create an in-memory database to avoid changing the on-disk database.
  # 
  # This connection must be kept open, because when the last connection to an in-memory database closes, its data is gone. 
  # It uses shared cache mode to allow other database connections to see the same data. 
  # See: https://www.sqlite.org/inmemorydb.html
  fk_mem_db = SQLite3::Database.new 'file::memory:?cache=shared', { results_as_hash: true }

  # Fill the in-memory database from the on-disk database.
  # See: https://www.sqlite.org/lang_vacuum.html#vacuuminto, https://stackoverflow.com/a/58932207
  fk_file_db = SQLite3::Database.new args['DB'], { results_as_hash: true }
  fk_file_db.execute("VACUUM INTO 'file::memory:?cache=shared'")
  fk_file_db.close

  import_food_rescue_categories args['CSV_IN'], fk_mem_db
  import_food_rescue_food_names args['CSV_IN'], fk_mem_db
  
  # Load each (English) FoodKeeper product and import it into the database.
  num = 1
  headers = ['ID', 'Title', 'Abstract', 'Text', 'Topic type', 'Categories', 'Author', 'Date added', 'Version date', 'Note']
  csv_write_options = { write_headers: true, headers: headers, force_quotes: true }
  outfile = CSV.open(args['CSV_OUT'], 'w', csv_write_options)
  count = fk_mem_db.get_first_value('SELECT count() FROM PRODUCTS')
  fk_mem_db.execute('SELECT ID FROM PRODUCTS ORDER BY cast(ID as NUMBER)') do |product|

    puts "converting FoodKeeper product #{num} of #{count} (ID #{product['ID']})"
    num += 1

    csv_topics = product_to_csv(product['ID'], fk_mem_db)
    csv_topics.each { |topic| outfile << topic }
  end

  # @todo: Also write a second CSV file containing the literature source. Data for the literature
  # record, which still have to be transformed to BibTeX syntax:
  #   id: USDA-1
  #   abbreviation: USDA-1
  #   entry: Food Safety and Inspection Service of the United States Department of Agriculture:
  #     Foodkeeper. 2017. https://play.google.com/store/apps/details?id=gov.usda.fsis.foodkeeper2

rescue ArgumentError => e
  $stderr.puts e.message
  $stderr.puts e.backtrace
  exit -1
ensure
  fk_file_db.close if fk_file_db
  fk_mem_db.close if fk_mem_db
end
