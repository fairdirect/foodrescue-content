#!/usr/bin/env ruby
# NOTE: Above shebang selects the first Ruby found in $PATH and is standard practice to work with 
# multiple installed versions and version switchers like chruby; see https://stackoverflow.com/a/2792076

require 'docopt'
require 'csv'

version = '0.1'

# Command line documentation that's also the spec for a command line parser.
# 
# Format specs:
#     http://docopt.org/
# Library docs:
#     https://github.com/docopt/docopt.rb
doc = <<DOCOPT
Transform the CSV file with Open Food Facts products to another with only relevant colums.

The script reads CSV file INFILE and transforms this to CSV fie OUTFILE. Only the columns 
specified by arguments will be taken over into the new CSV files, all others will be 
discarded.

The output will always be comma-separated and field values quoted with ".

Usage:
    #{__FILE__} [options] INFILE OUTFILE
    #{__FILE__} -h | --help
    #{__FILE__} -v | --version

Examples:
    #{__FILE__} --columns code,product_name,categories in.csv out.csv
    #{__FILE__} --columns code,product_name,categories,categories_tags,categories_en,main_category,main_category_en in.csv out.csv

Options:
    -c COLS, --columns COLS       Comma-separated list of column to include in the output CSV.
                                  You can use all column headers from the input CSV. The columns 
                                  order must be the same as in the input CSV file.
    -r COLS, --required COLS      Comma-separated list of columns for which a value is required 
                                  in order to include a record into the output file.
    -h, --help                    Show this screen.
    -v, --version                 Show version.

DOCOPT

# Obtain the arguments and make sure the script is invoked correctly.
begin
    args = Docopt::docopt(doc, {version: version, help: true})
rescue Docopt::Exit => e
    puts e.message
    exit -1
end 

# @todo (later) Open INFILE, read the headers line, and raise an error if any of the 
#   --columns output headers does not exist in the input file.
output_columns   = if args['--columns'].nil? then [] else args['--columns'].split(',') end
required_columns = if args['--required'].nil? then [] else args['--required'].split(',') end

csv_write_options = { write_headers: true, headers: output_columns, force_quotes: true }
outfile = CSV.open(args['OUTFILE'], 'w', csv_write_options)

# The Open Food Facts products CSV file does not use quoting, as it is tab-separated 
# and the tab character is not used in any field value. So for the library to read this 
# file without errors, we have to give any UTF-8 character as quote character that does 
# not appear in the file at all. Here we use "✣" (FOUR BALLOON-SPOKED ASTERISK, https://codepoints.net/U+2723).
csv_read_options = { headers: true, col_sep: "\t", quote_char: "\u{2723}" }

# To keep the memory footprint small, read one line at a time with CSV.foreach().
# See: "Processing large CSV files with Ruby", https://dalibornasevic.com/posts/68
CSV.foreach(args['INFILE'], csv_read_options) do |record|
  
    # Work with Hash as CSV::Row objects do not support #slice etc..
    record = record.to_hash

    # Do not process this record if any value in required columns is empty.
    next if record.slice(*required_columns).any? { |key, value| value.nil? }

    # Filter fields = { fieldname1: "value1", fieldname2: "value2", …} by given fieldnames.
    # ("*columns" works to pass an array as a variable number of individual arguments.)
    # @todo (later) Order output values according to the order in output_columns, i.e. 
    #   allow re-ordering columns with this script. Also adapt the -c option documentation afterwards.
    outfile << record.slice(*output_columns)
end
